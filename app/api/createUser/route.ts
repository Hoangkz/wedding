import { NextResponse, NextRequest } from 'next/server';
import { prisma } from '@/lib/prisma'; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn Prisma Client
import bcrypt from 'bcrypt';
import { nanoid } from 'nanoid';

// M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
const DEFAULT_PASSWORD = "12345";
// ƒê·ªô ph·ª©c t·∫°p c·ªßa thu·∫≠t to√°n bƒÉm (salt)
const SALT_ROUNDS = 10;

export async function POST(req: NextRequest) {
    // üî¥ 1. Ki·ªÉm tra Quy·ªÅn H·∫°n (Authorization)
    // C·∫ßn ki·ªÉm tra Bearer Token ho·∫∑c Session Cookie ƒë·ªÉ ƒë·∫£m b·∫£o
    // ch·ªâ ng∆∞·ªùi d√πng Admin m·ªõi c√≥ th·ªÉ t·∫°o t√†i kho·∫£n m·ªõi.
    // (B·ªè qua ph·∫ßn n√†y ·ªü ƒë√¢y nh∆∞ng B·∫ÆT BU·ªòC ph·∫£i th·ª±c hi·ªán trong th·ª±c t·∫ø)

    try {
        const body = await req.json();
        const {
            userName,
            shortName,
            name,
            dob,
            phone,
            address,
            mapUrl,
            father,
            mother,
            bio,
            note,
            title,
            bank,
            account,
            weddingDate,
            weddingTime
        } = body;
        if (!userName) {
            return NextResponse.json({ error: 'T√™n ƒëƒÉng nh·∫≠p (userName) l√† b·∫Øt bu·ªôc.' }, { status: 400 });
        }
        const existingUser = await prisma.user.findUnique({ where: { userName } });
        if (existingUser) {
            return NextResponse.json({ error: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.' }, { status: 409 }); // 409 Conflict
        }
        const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, SALT_ROUNDS);
        const newUser = await prisma.user.create({
            data: {
                id: nanoid(),
                userName,
                password: hashedPassword, // L∆∞u m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c bƒÉm
                shortName: shortName || null,
                name: name || null,
                dob: dob ? new Date(dob) : null, // Chuy·ªÉn sang ƒë·ªëi t∆∞·ª£ng Date
                phone: phone || null,
                address: address || null,
                mapUrl: mapUrl || null,
                father: father || null,
                mother: mother || null,
                bio: bio || null,
                note: note || null,
                title: title || null,
                bank: bank || null,
                account: account || null,
                weddingDate: weddingDate ? new Date(weddingDate) : null,
                weddingTime: weddingTime || null,
                // ID s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c t·∫°o b·ªüi Prisma/Database
                // qrCodeUrl: s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            },
        });

        return NextResponse.json({
            message: 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng. M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: 12345.',
            user: newUser
        }, { status: 201 }); // 201 Created

    } catch (error: any) {
        // X·ª≠ l√Ω l·ªói tr√πng l·∫∑p (n·∫øu kh√¥ng b·∫Øt ƒë∆∞·ª£c ·ªü b∆∞·ªõc 3)
        if (error.code === 'P2002') {
            return NextResponse.json({
                error: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.',
                details: 'Unique constraint failed on the field: userName'
            }, { status: 409 });
        }

        return NextResponse.json({
            error: 'Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng.',
            details: error.message
        }, { status: 500 });
    }
}